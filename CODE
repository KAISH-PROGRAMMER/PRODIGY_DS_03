Step 1: Load the dataset
import pandas as pd
# Load the dataset
url = "https://archive.ics.uci.edu/ml/machine-learning-databases/00222/bank-additional-full.csv"
data = pd.read_csv(url, delimiter=';')
# Display the first few rows of the dataset
data.head()

Step 2: Preprocess the data
# Check for missing values
data.isnull().sum()
# Convert categorical variables to numeric using one-hot encoding
data = pd.get_dummies(data, drop_first=True)
# Display the first few rows of the preprocessed dataset
data.head()

Step 3: Split the data into training and testing sets
from sklearn.model_selection import train_test_split
# Define the feature variables (X) and the target variable (y)
X = data.drop('y_yes', axis=1)
y = data['y_yes']
# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

Step 4: Train a decision tree classifier
from sklearn.tree import DecisionTreeClassifier
# Initialize and train the decision tree classifier
clf = DecisionTreeClassifier(random_state=42)
clf.fit(X_train, y_train)

Step 5: Evaluate the classifier
from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score
# Make predictions on the test set
y_pred = clf.predict(X_test)
# Calculate evaluation metrics
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred)
recall = recall_score(y_test, y_pred)
f1 = f1_score(y_test, y_pred)
print(f"Accuracy: {accuracy}")
print(f"Precision: {precision}")
print(f"Recall: {recall}")
print(f"F1 Score: {f1}")

Step 6: Visualize the decision tree
from sklearn.tree import plot_tree
import matplotlib.pyplot as plt
# Plot the decision tree
plt.figure(figsize=(20, 10))
plot_tree(clf, filled=True, feature_names=X.columns, class_names=['No', 'Yes'], rounded=True)
plt.show()


